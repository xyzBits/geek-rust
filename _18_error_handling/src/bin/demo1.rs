/// 墨菲定律
/// 任何一个系统，只要运行的时间足够久，或者用户规模足够大，
/// 极小 概率的错误就一定会发生，
///
/// 对于开发者来说，错误处理包含这几部分
/// 1。 当错误发生时，用合适的错误类型捕获这个错误
/// 2。 错误捕获后，可以立刻处理，也可以延迟到不得不处理的地方再处理，这就涉及到错误的传播
/// 3。 根据不同的错误类型，给用户返回合适的，帮助他们理解问题所在的错误信息
///
/// 使用返回值 的方式，有个致使缺陷，在调用者调用时，错误就必须 得到处理或者显式的传播
/// 在 Rust 中，如果你只想传播错误，不想就地处理，可以用 ? 操作符
///
fn main() {

}