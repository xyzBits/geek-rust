
/// 在任何语言里，栈上的值都有自己的生命周期，它和帧的生命周期一样，
/// 而 Rust 中，进一步明确这个概念，并且为堆上的内在也引入了生命周期
///
/// 在其他语言中，堆内在的生命周期是不确定的，或者是未定义的，
/// 因此，要么开发者手工维护，要么语言在运行时做额外的检查
///
/// 而在 Rust 中，除非显式地做 Box::leak() Box::into_raw() ManualDrop
/// 等动作，一般来说，堆内在的生命周期，会默认和其栈内存的生命周期绑定在一起
///
/// 所以在这种默认情况下，在每个函数的作用域中，编译器就可以对比值和其引用的生命周期，
/// 来确保 引用的生命周期不超出值的生命周期
///
fn main() {

}