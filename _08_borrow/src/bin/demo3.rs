/// 借用的生命周期及其结束
///
/// 所以我们对值的引用也要有约束，这个结束 是
///                借用不能超过 （outlive） 值的生存期
///
/// 这个约束很直观，也很好理解，在上面的代码中，sum()函数牌 main 函数的下一层调用栈中
/// 它结束后，main函数还会继续执行，所以在main函数中定义的data生命周期要比 sum 中对
/// data的引用要长，这样不会有任何问题
///


fn main() {
    let r = local_ref();
    println!("r: {:p}", r);
}

fn local_ref<'a>() -> &'a i32 {
    let a = 42;
    &a
}